/* OpenRISC opcode support.  -*- C -*-
   Copyright (C) 2000, 2001 Free Software Foundation
   Based upon work by Red Hat, Inc.
   This file is part of CGEN.  */

/* This file is an addendum to or32.cpu.  Heavy use of C code isn't
   appropriate in .cpu files, so it resides here.  This especially applies
   to assembly/disassembly where parsing/printing can be quite involved.
   Such things aren't really part of the specification of the cpu, per se,
   so .cpu files provide the general framework and .opc files handle the
   nitty-gritty details as necessary.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h"
*/

/* -- opc.h */
#undef CGEN_DIS_HASH_SIZE
#define CGEN_DIS_HASH_SIZE 64
#undef CGEN_DIS_HASH
#define CGEN_DIS_HASH(buffer, value) (((unsigned char *) (buffer))[0] >> 2)

/* -- */

/* -- opc.c */
/* -- */

/* -- asm.c */

#define CGEN_VERBOSE_ASSEMBLER_ERRORS

long
openrisc_sign_extend_16bit (value)
     long value;
{
  return (long) (short) value;
}


/* Handle hi().  */

static const char *
parse_hi16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "hi(", 3) == 0)
    {
      *strp += 3;

#if 0
      errmsg = cgen_parse_signed_integer (cd, strp, opindex, valuep);
      if (errmsg != NULL)
        fprintf (stderr, "parse_hi: %s\n", errmsg);
      if (errmsg != NULL)
#endif
        errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_HI16,
                                     &result_type, &value);
      if (**strp != ')')
        return "missing `)'";
      ++*strp;
      if (errmsg == NULL
          && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
        value >>= 16;
      *valuep = (long) (short) value;

      return errmsg;
    }
  else
    {
      if (**strp == '-')
        errmsg = cgen_parse_signed_integer (cd, strp, opindex, (long *) &value);
      else
        errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
    }
  *valuep = (long) (short) (value & 0xffff);
  return errmsg;
}


/* Handle lo() */

static const char *
parse_lo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
{
  const char *errmsg;
  enum cgen_parse_operand_result result_type;
  bfd_vma value;

  if (**strp == '#')
    ++*strp;

  if (strncasecmp (*strp, "lo(", 3) == 0)
    {
      *strp += 3;

#if 0 
      errmsg = cgen_parse_signed_integer (cd, strp, opindex, valuep);
      if (errmsg != NULL)
        fprintf (stderr, "parse_lo: %s\n", errmsg);

      if (errmsg != NULL)
#endif
        errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_LO16,
                                     &result_type, &value);
      if (**strp != ')')
        return "missing `)'";
      ++*strp;
      if (errmsg == NULL
          && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
        value &= 0xffff;
      *valuep = (long) (short) value;

      return errmsg;
    }

  if (**strp == '-')
    errmsg = cgen_parse_signed_integer (cd, strp, opindex, (long *) &value);
  else
    errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
  *valuep = (long) (short) (value & 0xffff);
  return errmsg;
}

/* -- */

/* -- ibd.h */
extern openrisc_sign_extend_16bit (long);

/* -- */


